package roblox;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Problem1 {
    public static List<Integer> collateSortedLists(List<Integer> l1, List<Integer> l2) {

    	List<Integer> list = new ArrayList<>();
    	int i = 0;
    	int j = 0;

    	
    	if(l1 == null && l2 == null)
    		return list;
    	if(l1 == null || l2 == null){
    		list.addAll((l1 == null)? l2:l1);
    		return list;
    	}
    	
    	while(i < l1.size() && j < l2.size()){
    		
    		int v1 = l1.get(i); 
    		int v2 = l2.get(j);	
    		
    		if(v1 < v2){
    			list.add(v1);
    			i++;
    		}
    		else{
    			list.add(v2);
    			j++;
    		}
    	}
    	
    	while(i < l1.size())
    		list.add(l1.get(i++));
    	
    	while(j < l2.size())
    		list.add(l2.get(j++));
    
    	return list;
    }
    
    
    public static void main(String[] args){
    	List<Integer> l1 = new ArrayList<>();
    	l1.add(0);
    	l1.add(2);
    	l1.add(3);

    	List<Integer> l2 = new ArrayList<>();
    	l2.add(1);
    	l2.add(3);
    	l2.add(4);
    	l2.add(5);

    	collateSortedLists(l1, l2);
    }
    
    public static 
    	  int maxSubarrayProduct(int arr[], int n)
    	  {
    	      // max positive product ending at the current position
    	      int max_ending_here = 1;
    	   
    	      // min negative product ending at the current position
    	      int min_ending_here = 1;
    	   
    	      // Initialize overall max product
    	      int max_so_far = 1;
    	   
    	      /* Traverse throught the array. Following values are maintained after the ith iteration:
    	         max_ending_here is always 1 or some positive product ending with arr[i]
    	         min_ending_here is always 1 or some negative product ending with arr[i] */
    	      for (int i = 0; i < n; i++)
    	      {
    	          /* If this element is positive, update max_ending_here. Update
    	             min_ending_here only if min_ending_here is negative */
    	          if (arr[i] > 0)
    	          {
    	              max_ending_here = max_ending_here*arr[i];
    	              min_ending_here = Math.min (min_ending_here * arr[i], 1);
    	          }
    	   
    	          /* If this element is 0, then the maximum product cannot
    	             end here, make both max_ending_here and min_ending_here 0
    	             Assumption: Output is alway greater than or equal to 1. */
    	          else if (arr[i] == 0)
    	          {
    	              max_ending_here = 1;
    	              min_ending_here = 1;
    	          }
    	   
    	          /* If element is negative. This is tricky
    	             max_ending_here can either be 1 or positive. min_ending_here can either be 1 
    	             or negative.
    	             next min_ending_here will always be prev. max_ending_here * arr[i]
    	             next max_ending_here will be 1 if prev min_ending_here is 1, otherwise 
    	             next max_ending_here will be prev min_ending_here * arr[i] */
    	          else
    	          {
    	              int temp = max_ending_here;
    	              max_ending_here = Math.max (min_ending_here * arr[i], 1);
    	              min_ending_here = temp * arr[i];
    	          }
    	   
    	          // update max_so_far, if needed
    	          if (max_so_far <  max_ending_here)
    	            max_so_far  =  max_ending_here;
    	      }
    	   
    	      return max_so_far;
    	  
    }
    
    
    
    
}