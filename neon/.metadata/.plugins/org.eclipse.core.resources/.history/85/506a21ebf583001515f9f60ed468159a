package org.neon.controller;


import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;

import org.neon.bean.Image;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.AsyncResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ImageProcessor {
	@RequestMapping(value = "/{account_id}/image", method = RequestMethod.POST,headers="Accept=image/jpg")
	public Image uploadImage(@PathVariable String account_id, HttpEntity<byte[]> requestEntity) throws Exception{
		
		return (Image) storeImage(requestEntity.getBody(), account_id);

	}
	
	//HTTP GET: /{account_id}/image?id={id}&w={width}&h={height}
	@RequestMapping(value = "/{account_id}/image", method = RequestMethod.GET,headers="Accept=application/json")
	public Image getImage(@PathVariable int account_id, 
			@RequestParam(value="id", defaultValue = "0") int imageId,
			@RequestParam(value="width", defaultValue = "0") int width,
			@RequestParam(value="height", defaultValue = "0") int height){
		
		//Check to see if the image is in the cache
		//if not in cache then proceess the image and add to cache
		
		
		Image i = new Image();
		i.setImageId("");
		i.setUrl("xyz");
		return i;
	}
	
	@Async
    public Future<Image> storeImage(byte[] img, String account_id) throws Exception {

		FileOutputStream output = null;		
		final String fileName = account_id + "/" + System.currentTimeMillis() + ".jpg";
		
		try {
			output = new FileOutputStream(new File(fileName));
			output.write(img);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			
			throw new Exception("Unable to save image!.");
		}
		finally{
			try {
				output.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		Image image = new Image();
		image.setImageId(fileName);
		image.setUrl("/" + account_id + "/image?id=" + fileName);
		
		preProcessImage(img, account_id);
		
		return new AsyncResult<Image>(image);
	
	}
	
	@Async
    public Future<Image> preProcessImage(byte[] img, String account_id) {
		//code to pre-process images to required format
		//and store in cache
		
		return null;
	}
}
